/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.process.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.process.ide.contentassist.antlr.internal.InternalProcessParser;
import org.xtext.example.process.services.ProcessGrammarAccess;

public class ProcessParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ProcessGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ProcessGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTaskAccess().getAlternatives(), "rule__Task__Alternatives");
			builder.put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
			builder.put(grammarAccess.getSimpleParameterAccess().getAlternatives(), "rule__SimpleParameter__Alternatives");
			builder.put(grammarAccess.getBooleanParameterAccess().getValueAlternatives_1_0(), "rule__BooleanParameter__ValueAlternatives_1_0");
			builder.put(grammarAccess.getComplexParameterAccess().getAlternatives(), "rule__ComplexParameter__Alternatives");
			builder.put(grammarAccess.getVariableTypeAccess().getAlternatives(), "rule__VariableType__Alternatives");
			builder.put(grammarAccess.getSimpleVariableTypeAccess().getAlternatives(), "rule__SimpleVariableType__Alternatives");
			builder.put(grammarAccess.getComplexVariableTypeAccess().getAlternatives(), "rule__ComplexVariableType__Alternatives");
			builder.put(grammarAccess.getArrayTypeAccess().getAlternatives(), "rule__ArrayType__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0(), "rule__BooleanLiteral__ValueAlternatives_0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_2(), "rule__Process__Group_2__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_3(), "rule__Process__Group_3__0");
			builder.put(grammarAccess.getActorCategoryAccess().getGroup(), "rule__ActorCategory__Group__0");
			builder.put(grammarAccess.getActorCategoryAccess().getGroup_6(), "rule__ActorCategory__Group_6__0");
			builder.put(grammarAccess.getActorCategoryAccess().getGroup_11(), "rule__ActorCategory__Group_11__0");
			builder.put(grammarAccess.getConcretActorAccess().getGroup(), "rule__ConcretActor__Group__0");
			builder.put(grammarAccess.getTaskSimpleAccess().getGroup(), "rule__TaskSimple__Group__0");
			builder.put(grammarAccess.getTaskSimpleAccess().getGroup_2(), "rule__TaskSimple__Group_2__0");
			builder.put(grammarAccess.getTaskSimpleAccess().getGroup_3(), "rule__TaskSimple__Group_3__0");
			builder.put(grammarAccess.getTaskSimpleAccess().getGroup_5(), "rule__TaskSimple__Group_5__0");
			builder.put(grammarAccess.getTaskCompositeAccess().getGroup(), "rule__TaskComposite__Group__0");
			builder.put(grammarAccess.getTaskCompositeAccess().getGroup_2(), "rule__TaskComposite__Group_2__0");
			builder.put(grammarAccess.getTaskCompositeAccess().getGroup_3(), "rule__TaskComposite__Group_3__0");
			builder.put(grammarAccess.getTaskCompositeAccess().getGroup_6(), "rule__TaskComposite__Group_6__0");
			builder.put(grammarAccess.getStringParameterAccess().getGroup(), "rule__StringParameter__Group__0");
			builder.put(grammarAccess.getIntParameterAccess().getGroup(), "rule__IntParameter__Group__0");
			builder.put(grammarAccess.getFloatParameterAccess().getGroup(), "rule__FloatParameter__Group__0");
			builder.put(grammarAccess.getBooleanParameterAccess().getGroup(), "rule__BooleanParameter__Group__0");
			builder.put(grammarAccess.getCustumParameterAccess().getGroup(), "rule__CustumParameter__Group__0");
			builder.put(grammarAccess.getCustumParameterAccess().getGroup_2(), "rule__CustumParameter__Group_2__0");
			builder.put(grammarAccess.getCustumParameterAccess().getGroup_3(), "rule__CustumParameter__Group_3__0");
			builder.put(grammarAccess.getCustumParameterAccess().getGroup_4(), "rule__CustumParameter__Group_4__0");
			builder.put(grammarAccess.getCustumParameterAccess().getGroup_4_2(), "rule__CustumParameter__Group_4_2__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_2(), "rule__VariableDeclaration__Group_2__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_2_2(), "rule__VariableDeclaration__Group_2_2__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup_0(), "rule__ArrayType__Group_0__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup_1(), "rule__ArrayType__Group_1__0");
			builder.put(grammarAccess.getArrayAccessAccess().getGroup(), "rule__ArrayAccess__Group__0");
			builder.put(grammarAccess.getModelAccess().getProcessusAssignment(), "rule__Model__ProcessusAssignment");
			builder.put(grammarAccess.getProcessAccess().getIdentifiantAssignment_1(), "rule__Process__IdentifiantAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getEntreesAssignment_2_1(), "rule__Process__EntreesAssignment_2_1");
			builder.put(grammarAccess.getProcessAccess().getSortiesAssignment_3_1(), "rule__Process__SortiesAssignment_3_1");
			builder.put(grammarAccess.getProcessAccess().getVariablesAssignment_5(), "rule__Process__VariablesAssignment_5");
			builder.put(grammarAccess.getProcessAccess().getActeurCategoriesAssignment_6(), "rule__Process__ActeurCategoriesAssignment_6");
			builder.put(grammarAccess.getProcessAccess().getTachesAssignment_7(), "rule__Process__TachesAssignment_7");
			builder.put(grammarAccess.getActorCategoryAccess().getIdentifiantAssignment_1(), "rule__ActorCategory__IdentifiantAssignment_1");
			builder.put(grammarAccess.getActorCategoryAccess().getCodeActeurAssignment_5(), "rule__ActorCategory__CodeActeurAssignment_5");
			builder.put(grammarAccess.getActorCategoryAccess().getCodeActeursAssignment_6_1(), "rule__ActorCategory__CodeActeursAssignment_6_1");
			builder.put(grammarAccess.getActorCategoryAccess().getVariablesAssignment_7(), "rule__ActorCategory__VariablesAssignment_7");
			builder.put(grammarAccess.getActorCategoryAccess().getDescriptionActeurAssignment_10(), "rule__ActorCategory__DescriptionActeurAssignment_10");
			builder.put(grammarAccess.getActorCategoryAccess().getActeursConcretsAssignment_11_2(), "rule__ActorCategory__ActeursConcretsAssignment_11_2");
			builder.put(grammarAccess.getConcretActorAccess().getIdentifiantAssignment_1(), "rule__ConcretActor__IdentifiantAssignment_1");
			builder.put(grammarAccess.getConcretActorAccess().getDescriptionActeurAssignment_5(), "rule__ConcretActor__DescriptionActeurAssignment_5");
			builder.put(grammarAccess.getConcretActorAccess().getVariablesAssignment_6(), "rule__ConcretActor__VariablesAssignment_6");
			builder.put(grammarAccess.getTaskSimpleAccess().getIdentifiantAssignment_1(), "rule__TaskSimple__IdentifiantAssignment_1");
			builder.put(grammarAccess.getTaskSimpleAccess().getEntreesAssignment_2_1(), "rule__TaskSimple__EntreesAssignment_2_1");
			builder.put(grammarAccess.getTaskSimpleAccess().getSortiesAssignment_3_1(), "rule__TaskSimple__SortiesAssignment_3_1");
			builder.put(grammarAccess.getTaskSimpleAccess().getDescriptionActeurAssignment_5_2(), "rule__TaskSimple__DescriptionActeurAssignment_5_2");
			builder.put(grammarAccess.getTaskSimpleAccess().getVariablesAssignment_6(), "rule__TaskSimple__VariablesAssignment_6");
			builder.put(grammarAccess.getTaskCompositeAccess().getIdentifiantAssignment_1(), "rule__TaskComposite__IdentifiantAssignment_1");
			builder.put(grammarAccess.getTaskCompositeAccess().getEntreesAssignment_2_1(), "rule__TaskComposite__EntreesAssignment_2_1");
			builder.put(grammarAccess.getTaskCompositeAccess().getSortiesAssignment_3_1(), "rule__TaskComposite__SortiesAssignment_3_1");
			builder.put(grammarAccess.getTaskCompositeAccess().getVariablesAssignment_5(), "rule__TaskComposite__VariablesAssignment_5");
			builder.put(grammarAccess.getTaskCompositeAccess().getDescriptionActeurAssignment_6_2(), "rule__TaskComposite__DescriptionActeurAssignment_6_2");
			builder.put(grammarAccess.getTaskCompositeAccess().getTachesAssignment_8(), "rule__TaskComposite__TachesAssignment_8");
			builder.put(grammarAccess.getStringParameterAccess().getValueAssignment_1(), "rule__StringParameter__ValueAssignment_1");
			builder.put(grammarAccess.getIntParameterAccess().getValueAssignment_1(), "rule__IntParameter__ValueAssignment_1");
			builder.put(grammarAccess.getFloatParameterAccess().getValueAssignment_1(), "rule__FloatParameter__ValueAssignment_1");
			builder.put(grammarAccess.getBooleanParameterAccess().getValueAssignment_1(), "rule__BooleanParameter__ValueAssignment_1");
			builder.put(grammarAccess.getCustumParameterAccess().getNomParametreAssignment_1(), "rule__CustumParameter__NomParametreAssignment_1");
			builder.put(grammarAccess.getCustumParameterAccess().getParametresEntreeAssignment_2_1(), "rule__CustumParameter__ParametresEntreeAssignment_2_1");
			builder.put(grammarAccess.getCustumParameterAccess().getParametresSortieAssignment_3_1(), "rule__CustumParameter__ParametresSortieAssignment_3_1");
			builder.put(grammarAccess.getCustumParameterAccess().getVariablesAssignment_4_1(), "rule__CustumParameter__VariablesAssignment_4_1");
			builder.put(grammarAccess.getCustumParameterAccess().getDescriptionActeurAssignment_4_2_2(), "rule__CustumParameter__DescriptionActeurAssignment_4_2_2");
			builder.put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0(), "rule__VariableDeclaration__TypeAssignment_0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdentifiantAssignment_1(), "rule__VariableDeclaration__IdentifiantAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_2_1(), "rule__VariableDeclaration__ValueAssignment_2_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_2_2_1(), "rule__VariableDeclaration__ValueAssignment_2_2_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
			builder.put(grammarAccess.getFloatLiteralAccess().getValueAssignment(), "rule__FloatLiteral__ValueAssignment");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
			builder.put(grammarAccess.getVariableReferenceAccess().getVariableAssignment(), "rule__VariableReference__VariableAssignment");
			builder.put(grammarAccess.getArrayAccessAccess().getArrayAssignment_0(), "rule__ArrayAccess__ArrayAssignment_0");
			builder.put(grammarAccess.getArrayAccessAccess().getIndexAssignment_2(), "rule__ArrayAccess__IndexAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ProcessGrammarAccess grammarAccess;

	@Override
	protected InternalProcessParser createParser() {
		InternalProcessParser result = new InternalProcessParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ProcessGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ProcessGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
