/**
 * generated by Xtext 2.35.0
 */
package org.xtext.example.process.process.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.process.process.ActorCategory;
import org.xtext.example.process.process.ArrayAccess;
import org.xtext.example.process.process.BooleanLiteral;
import org.xtext.example.process.process.BooleanParameter;
import org.xtext.example.process.process.ComplexParameter;
import org.xtext.example.process.process.ConcretActor;
import org.xtext.example.process.process.CustumParameter;
import org.xtext.example.process.process.Expression;
import org.xtext.example.process.process.FloatLiteral;
import org.xtext.example.process.process.FloatParameter;
import org.xtext.example.process.process.IntLiteral;
import org.xtext.example.process.process.IntParameter;
import org.xtext.example.process.process.Literal;
import org.xtext.example.process.process.Model;
import org.xtext.example.process.process.Parameter;
import org.xtext.example.process.process.ProcessFactory;
import org.xtext.example.process.process.ProcessPackage;
import org.xtext.example.process.process.SimpleParameter;
import org.xtext.example.process.process.StringLiteral;
import org.xtext.example.process.process.StringParameter;
import org.xtext.example.process.process.Task;
import org.xtext.example.process.process.TaskComposite;
import org.xtext.example.process.process.TaskSimple;
import org.xtext.example.process.process.VariableDeclaration;
import org.xtext.example.process.process.VariableReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ProcessFactoryImpl extends EFactoryImpl implements ProcessFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ProcessFactory init()
  {
    try
    {
      ProcessFactory theProcessFactory = (ProcessFactory)EPackage.Registry.INSTANCE.getEFactory(ProcessPackage.eNS_URI);
      if (theProcessFactory != null)
      {
        return theProcessFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ProcessFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ProcessPackage.MODEL: return createModel();
      case ProcessPackage.PROCESS: return createProcess();
      case ProcessPackage.ACTOR_CATEGORY: return createActorCategory();
      case ProcessPackage.CONCRET_ACTOR: return createConcretActor();
      case ProcessPackage.TASK: return createTask();
      case ProcessPackage.TASK_SIMPLE: return createTaskSimple();
      case ProcessPackage.TASK_COMPOSITE: return createTaskComposite();
      case ProcessPackage.PARAMETER: return createParameter();
      case ProcessPackage.SIMPLE_PARAMETER: return createSimpleParameter();
      case ProcessPackage.STRING_PARAMETER: return createStringParameter();
      case ProcessPackage.INT_PARAMETER: return createIntParameter();
      case ProcessPackage.FLOAT_PARAMETER: return createFloatParameter();
      case ProcessPackage.BOOLEAN_PARAMETER: return createBooleanParameter();
      case ProcessPackage.COMPLEX_PARAMETER: return createComplexParameter();
      case ProcessPackage.CUSTUM_PARAMETER: return createCustumParameter();
      case ProcessPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case ProcessPackage.EXPRESSION: return createExpression();
      case ProcessPackage.LITERAL: return createLiteral();
      case ProcessPackage.STRING_LITERAL: return createStringLiteral();
      case ProcessPackage.INT_LITERAL: return createIntLiteral();
      case ProcessPackage.FLOAT_LITERAL: return createFloatLiteral();
      case ProcessPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case ProcessPackage.VARIABLE_REFERENCE: return createVariableReference();
      case ProcessPackage.ARRAY_ACCESS: return createArrayAccess();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.process.process.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActorCategory createActorCategory()
  {
    ActorCategoryImpl actorCategory = new ActorCategoryImpl();
    return actorCategory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConcretActor createConcretActor()
  {
    ConcretActorImpl concretActor = new ConcretActorImpl();
    return concretActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskSimple createTaskSimple()
  {
    TaskSimpleImpl taskSimple = new TaskSimpleImpl();
    return taskSimple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskComposite createTaskComposite()
  {
    TaskCompositeImpl taskComposite = new TaskCompositeImpl();
    return taskComposite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleParameter createSimpleParameter()
  {
    SimpleParameterImpl simpleParameter = new SimpleParameterImpl();
    return simpleParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringParameter createStringParameter()
  {
    StringParameterImpl stringParameter = new StringParameterImpl();
    return stringParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntParameter createIntParameter()
  {
    IntParameterImpl intParameter = new IntParameterImpl();
    return intParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatParameter createFloatParameter()
  {
    FloatParameterImpl floatParameter = new FloatParameterImpl();
    return floatParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanParameter createBooleanParameter()
  {
    BooleanParameterImpl booleanParameter = new BooleanParameterImpl();
    return booleanParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexParameter createComplexParameter()
  {
    ComplexParameterImpl complexParameter = new ComplexParameterImpl();
    return complexParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustumParameter createCustumParameter()
  {
    CustumParameterImpl custumParameter = new CustumParameterImpl();
    return custumParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatLiteral createFloatLiteral()
  {
    FloatLiteralImpl floatLiteral = new FloatLiteralImpl();
    return floatLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableReference createVariableReference()
  {
    VariableReferenceImpl variableReference = new VariableReferenceImpl();
    return variableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayAccess createArrayAccess()
  {
    ArrayAccessImpl arrayAccess = new ArrayAccessImpl();
    return arrayAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessPackage getProcessPackage()
  {
    return (ProcessPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ProcessPackage getPackage()
  {
    return ProcessPackage.eINSTANCE;
  }

} //ProcessFactoryImpl
