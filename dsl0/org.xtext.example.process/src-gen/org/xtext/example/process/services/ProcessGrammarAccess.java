/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.process.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProcessGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.Model");
		private final Assignment cProcessusAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProcessusProcessParserRuleCall_0 = (RuleCall)cProcessusAssignment.eContents().get(0);
		
		//// Déclaration des éléments principaux
		//Model:
		//    processus+=Process*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//processus+=Process*
		public Assignment getProcessusAssignment() { return cProcessusAssignment; }
		
		//Process
		public RuleCall getProcessusProcessParserRuleCall_0() { return cProcessusProcessParserRuleCall_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifiantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiantIDTerminalRuleCall_1_0 = (RuleCall)cIdentifiantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntreesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntreesParameterParserRuleCall_2_1_0 = (RuleCall)cEntreesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSortiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSortiesParameterParserRuleCall_3_1_0 = (RuleCall)cSortiesAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Assignment cActeurCategoriesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActeurCategoriesActorCategoryParserRuleCall_6_0 = (RuleCall)cActeurCategoriesAssignment_6.eContents().get(0);
		private final Assignment cTachesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTachesTaskParserRuleCall_7_0 = (RuleCall)cTachesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Process:
		//    'Process' identifiant=ID
		//    ('(' entrees+=Parameter* ')')? // Paramètres d'entrée
		//    ('<' sorties+=Parameter* '>')? // Paramètres de sortie
		//    '{'
		//        (variables+=VariableDeclaration*)? // Déclaration de variables
		//        (acteurCategories+=ActorCategory*)?
		//        (taches+=Task*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Process' identifiant=ID
		//('(' entrees+=Parameter* ')')? // Paramètres d'entrée
		//('<' sorties+=Parameter* '>')? // Paramètres de sortie
		//'{'
		//    (variables+=VariableDeclaration*)? // Déclaration de variables
		//    (acteurCategories+=ActorCategory*)?
		//    (taches+=Task*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//identifiant=ID
		public Assignment getIdentifiantAssignment_1() { return cIdentifiantAssignment_1; }
		
		//ID
		public RuleCall getIdentifiantIDTerminalRuleCall_1_0() { return cIdentifiantIDTerminalRuleCall_1_0; }
		
		//('(' entrees+=Parameter* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//entrees+=Parameter*
		public Assignment getEntreesAssignment_2_1() { return cEntreesAssignment_2_1; }
		
		//Parameter
		public RuleCall getEntreesParameterParserRuleCall_2_1_0() { return cEntreesParameterParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//// Paramètres d'entrée
		//   ('<' sorties+=Parameter* '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//sorties+=Parameter*
		public Assignment getSortiesAssignment_3_1() { return cSortiesAssignment_3_1; }
		
		//Parameter
		public RuleCall getSortiesParameterParserRuleCall_3_1_0() { return cSortiesParameterParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }
		
		//// Paramètres de sortie
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(variables+=VariableDeclaration*)?
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_5_0() { return cVariablesVariableDeclarationParserRuleCall_5_0; }
		
		//// Déclaration de variables
		//       (acteurCategories+=ActorCategory*)?
		public Assignment getActeurCategoriesAssignment_6() { return cActeurCategoriesAssignment_6; }
		
		//ActorCategory
		public RuleCall getActeurCategoriesActorCategoryParserRuleCall_6_0() { return cActeurCategoriesActorCategoryParserRuleCall_6_0; }
		
		//(taches+=Task*)?
		public Assignment getTachesAssignment_7() { return cTachesAssignment_7; }
		
		//Task
		public RuleCall getTachesTaskParserRuleCall_7_0() { return cTachesTaskParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ActorCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.ActorCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifiantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiantIDTerminalRuleCall_1_0 = (RuleCall)cIdentifiantAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCodeActeurKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCodeActeurAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCodeActeurSTRINGTerminalRuleCall_5_0 = (RuleCall)cCodeActeurAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCodeActeursAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCodeActeursSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cCodeActeursAssignment_6_1.eContents().get(0);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_7_0 = (RuleCall)cVariablesAssignment_7.eContents().get(0);
		private final Keyword cDescriptionActeurKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDescriptionActeurAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDescriptionActeurSTRINGTerminalRuleCall_10_0 = (RuleCall)cDescriptionActeurAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cActeursConcretsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cActeursConcretsAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cActeursConcretsConcretActorParserRuleCall_11_2_0 = (RuleCall)cActeursConcretsAssignment_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//ActorCategory:
		//    'ActorCategory' identifiant=ID
		//    '{'
		//        'codeActeur' ':' codeActeur=STRING (',' codeActeurs+=STRING)*
		//        (variables+=VariableDeclaration*)?
		//        'descriptionActeur' ':' descriptionActeur=STRING
		//        ('acteursConcrets' ':' acteursConcrets+=ConcretActor*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ActorCategory' identifiant=ID
		//'{'
		//    'codeActeur' ':' codeActeur=STRING (',' codeActeurs+=STRING)*
		//    (variables+=VariableDeclaration*)?
		//    'descriptionActeur' ':' descriptionActeur=STRING
		//    ('acteursConcrets' ':' acteursConcrets+=ConcretActor*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ActorCategory'
		public Keyword getActorCategoryKeyword_0() { return cActorCategoryKeyword_0; }
		
		//identifiant=ID
		public Assignment getIdentifiantAssignment_1() { return cIdentifiantAssignment_1; }
		
		//ID
		public RuleCall getIdentifiantIDTerminalRuleCall_1_0() { return cIdentifiantIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'codeActeur'
		public Keyword getCodeActeurKeyword_3() { return cCodeActeurKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//codeActeur=STRING
		public Assignment getCodeActeurAssignment_5() { return cCodeActeurAssignment_5; }
		
		//STRING
		public RuleCall getCodeActeurSTRINGTerminalRuleCall_5_0() { return cCodeActeurSTRINGTerminalRuleCall_5_0; }
		
		//(',' codeActeurs+=STRING)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//codeActeurs+=STRING
		public Assignment getCodeActeursAssignment_6_1() { return cCodeActeursAssignment_6_1; }
		
		//STRING
		public RuleCall getCodeActeursSTRINGTerminalRuleCall_6_1_0() { return cCodeActeursSTRINGTerminalRuleCall_6_1_0; }
		
		//(variables+=VariableDeclaration*)?
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_7_0() { return cVariablesVariableDeclarationParserRuleCall_7_0; }
		
		//'descriptionActeur'
		public Keyword getDescriptionActeurKeyword_8() { return cDescriptionActeurKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//descriptionActeur=STRING
		public Assignment getDescriptionActeurAssignment_10() { return cDescriptionActeurAssignment_10; }
		
		//STRING
		public RuleCall getDescriptionActeurSTRINGTerminalRuleCall_10_0() { return cDescriptionActeurSTRINGTerminalRuleCall_10_0; }
		
		//('acteursConcrets' ':' acteursConcrets+=ConcretActor*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'acteursConcrets'
		public Keyword getActeursConcretsKeyword_11_0() { return cActeursConcretsKeyword_11_0; }
		
		//':'
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }
		
		//acteursConcrets+=ConcretActor*
		public Assignment getActeursConcretsAssignment_11_2() { return cActeursConcretsAssignment_11_2; }
		
		//ConcretActor
		public RuleCall getActeursConcretsConcretActorParserRuleCall_11_2_0() { return cActeursConcretsConcretActorParserRuleCall_11_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class ConcretActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.ConcretActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcretActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifiantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiantIDTerminalRuleCall_1_0 = (RuleCall)cIdentifiantAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionActeurKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionActeurAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionActeurSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionActeurAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConcretActor:
		//    'ConcretActor' identifiant=ID
		//    '{'
		//        'descriptionActeur' ':' descriptionActeur=STRING
		//        (variables+=VariableDeclaration*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ConcretActor' identifiant=ID
		//'{'
		//    'descriptionActeur' ':' descriptionActeur=STRING
		//    (variables+=VariableDeclaration*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ConcretActor'
		public Keyword getConcretActorKeyword_0() { return cConcretActorKeyword_0; }
		
		//identifiant=ID
		public Assignment getIdentifiantAssignment_1() { return cIdentifiantAssignment_1; }
		
		//ID
		public RuleCall getIdentifiantIDTerminalRuleCall_1_0() { return cIdentifiantIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'descriptionActeur'
		public Keyword getDescriptionActeurKeyword_3() { return cDescriptionActeurKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//descriptionActeur=STRING
		public Assignment getDescriptionActeurAssignment_5() { return cDescriptionActeurAssignment_5; }
		
		//STRING
		public RuleCall getDescriptionActeurSTRINGTerminalRuleCall_5_0() { return cDescriptionActeurSTRINGTerminalRuleCall_5_0; }
		
		//(variables+=VariableDeclaration*)?
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_6_0() { return cVariablesVariableDeclarationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.Task");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskCompositeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Task:
		//    TaskSimple | TaskComposite
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TaskSimple | TaskComposite
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TaskSimple
		public RuleCall getTaskSimpleParserRuleCall_0() { return cTaskSimpleParserRuleCall_0; }
		
		//TaskComposite
		public RuleCall getTaskCompositeParserRuleCall_1() { return cTaskCompositeParserRuleCall_1; }
	}
	public class TaskSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.TaskSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskSimpleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifiantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiantIDTerminalRuleCall_1_0 = (RuleCall)cIdentifiantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntreesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntreesParameterParserRuleCall_2_1_0 = (RuleCall)cEntreesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSortiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSortiesParameterParserRuleCall_3_1_0 = (RuleCall)cSortiesAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDescriptionActeurAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDescriptionActeurSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cDescriptionActeurAssignment_5_2.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TaskSimple:
		//    'TaskSimple' identifiant=ID
		//    ('(' entrees+=Parameter* ')')? // Paramètres d'entrée
		//    ('<' sorties+=Parameter* '>')? // Paramètres de sortie
		//    '{'
		//        ('description' ':' descriptionActeur=STRING)?
		//        (variables+=VariableDeclaration*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TaskSimple' identifiant=ID
		//('(' entrees+=Parameter* ')')? // Paramètres d'entrée
		//('<' sorties+=Parameter* '>')? // Paramètres de sortie
		//'{'
		//    ('description' ':' descriptionActeur=STRING)?
		//    (variables+=VariableDeclaration*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'TaskSimple'
		public Keyword getTaskSimpleKeyword_0() { return cTaskSimpleKeyword_0; }
		
		//identifiant=ID
		public Assignment getIdentifiantAssignment_1() { return cIdentifiantAssignment_1; }
		
		//ID
		public RuleCall getIdentifiantIDTerminalRuleCall_1_0() { return cIdentifiantIDTerminalRuleCall_1_0; }
		
		//('(' entrees+=Parameter* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//entrees+=Parameter*
		public Assignment getEntreesAssignment_2_1() { return cEntreesAssignment_2_1; }
		
		//Parameter
		public RuleCall getEntreesParameterParserRuleCall_2_1_0() { return cEntreesParameterParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//// Paramètres d'entrée
		//   ('<' sorties+=Parameter* '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//sorties+=Parameter*
		public Assignment getSortiesAssignment_3_1() { return cSortiesAssignment_3_1; }
		
		//Parameter
		public RuleCall getSortiesParameterParserRuleCall_3_1_0() { return cSortiesParameterParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }
		
		//// Paramètres de sortie
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('description' ':' descriptionActeur=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'description'
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//descriptionActeur=STRING
		public Assignment getDescriptionActeurAssignment_5_2() { return cDescriptionActeurAssignment_5_2; }
		
		//STRING
		public RuleCall getDescriptionActeurSTRINGTerminalRuleCall_5_2_0() { return cDescriptionActeurSTRINGTerminalRuleCall_5_2_0; }
		
		//(variables+=VariableDeclaration*)?
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_6_0() { return cVariablesVariableDeclarationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TaskCompositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.TaskComposite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifiantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiantIDTerminalRuleCall_1_0 = (RuleCall)cIdentifiantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntreesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEntreesParameterParserRuleCall_2_1_0 = (RuleCall)cEntreesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSortiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSortiesParameterParserRuleCall_3_1_0 = (RuleCall)cSortiesAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_5_0 = (RuleCall)cVariablesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDescriptionActeurAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDescriptionActeurSTRINGTerminalRuleCall_6_2_0 = (RuleCall)cDescriptionActeurAssignment_6_2.eContents().get(0);
		private final Keyword cTachesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTachesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTachesTaskParserRuleCall_8_0 = (RuleCall)cTachesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TaskComposite:
		//    'TaskComposite' identifiant=ID
		//    ('(' entrees+=Parameter* ')')? // Paramètres d'entrée
		//    ('<' sorties+=Parameter* '>')? // Paramètres de sortie
		//    '{'
		//        (variables+=VariableDeclaration*)?
		//        ('description' ':' descriptionActeur=STRING)?
		//        'taches' taches+=Task* // Une tâche composite contient d'autres tâches (simples ou composites)
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TaskComposite' identifiant=ID
		//('(' entrees+=Parameter* ')')? // Paramètres d'entrée
		//('<' sorties+=Parameter* '>')? // Paramètres de sortie
		//'{'
		//    (variables+=VariableDeclaration*)?
		//    ('description' ':' descriptionActeur=STRING)?
		//    'taches' taches+=Task* // Une tâche composite contient d'autres tâches (simples ou composites)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'TaskComposite'
		public Keyword getTaskCompositeKeyword_0() { return cTaskCompositeKeyword_0; }
		
		//identifiant=ID
		public Assignment getIdentifiantAssignment_1() { return cIdentifiantAssignment_1; }
		
		//ID
		public RuleCall getIdentifiantIDTerminalRuleCall_1_0() { return cIdentifiantIDTerminalRuleCall_1_0; }
		
		//('(' entrees+=Parameter* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//entrees+=Parameter*
		public Assignment getEntreesAssignment_2_1() { return cEntreesAssignment_2_1; }
		
		//Parameter
		public RuleCall getEntreesParameterParserRuleCall_2_1_0() { return cEntreesParameterParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//// Paramètres d'entrée
		//   ('<' sorties+=Parameter* '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//sorties+=Parameter*
		public Assignment getSortiesAssignment_3_1() { return cSortiesAssignment_3_1; }
		
		//Parameter
		public RuleCall getSortiesParameterParserRuleCall_3_1_0() { return cSortiesParameterParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }
		
		//// Paramètres de sortie
		//   '{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(variables+=VariableDeclaration*)?
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_5_0() { return cVariablesVariableDeclarationParserRuleCall_5_0; }
		
		//('description' ':' descriptionActeur=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'description'
		public Keyword getDescriptionKeyword_6_0() { return cDescriptionKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//descriptionActeur=STRING
		public Assignment getDescriptionActeurAssignment_6_2() { return cDescriptionActeurAssignment_6_2; }
		
		//STRING
		public RuleCall getDescriptionActeurSTRINGTerminalRuleCall_6_2_0() { return cDescriptionActeurSTRINGTerminalRuleCall_6_2_0; }
		
		//'taches'
		public Keyword getTachesKeyword_7() { return cTachesKeyword_7; }
		
		//taches+=Task*
		public Assignment getTachesAssignment_8() { return cTachesAssignment_8; }
		
		//Task
		public RuleCall getTachesTaskParserRuleCall_8_0() { return cTachesTaskParserRuleCall_8_0; }
		
		//// Une tâche composite contient d'autres tâches (simples ou composites)
		//   '}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Parameter:
		//    SimpleParameter | ComplexParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleParameter | ComplexParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleParameter
		public RuleCall getSimpleParameterParserRuleCall_0() { return cSimpleParameterParserRuleCall_0; }
		
		//ComplexParameter
		public RuleCall getComplexParameterParserRuleCall_1() { return cComplexParameterParserRuleCall_1; }
	}
	public class SimpleParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.SimpleParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanParameterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SimpleParameter:
		//    StringParameter | IntParameter | FloatParameter | BooleanParameter | VariableDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringParameter | IntParameter | FloatParameter | BooleanParameter | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringParameter
		public RuleCall getStringParameterParserRuleCall_0() { return cStringParameterParserRuleCall_0; }
		
		//IntParameter
		public RuleCall getIntParameterParserRuleCall_1() { return cIntParameterParserRuleCall_1; }
		
		//FloatParameter
		public RuleCall getFloatParameterParserRuleCall_2() { return cFloatParameterParserRuleCall_2; }
		
		//BooleanParameter
		public RuleCall getBooleanParameterParserRuleCall_3() { return cBooleanParameterParserRuleCall_3; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_4() { return cVariableDeclarationParserRuleCall_4; }
	}
	public class StringParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.StringParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringParameter:
		//    'String' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'String' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class IntParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.IntParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntParameter:
		//    'Int' value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Int' value=INT
		public Group getGroup() { return cGroup; }
		
		//'Int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class FloatParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.FloatParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FloatParameter:
		//    'Float' value=FLOAT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Float' value=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'Float'
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_0() { return cValueFLOATTerminalRuleCall_1_0; }
	}
	public class BooleanParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.BooleanParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BooleanParameter:
		//    'Boolean' value=('true' | 'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean' value=('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_1_0_1() { return cValueFalseKeyword_1_0_1; }
	}
	public class ComplexParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.ComplexParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskCompositeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActorCategoryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConcretActorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCustumParameterParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ComplexParameter:
		//    Process | TaskSimple | TaskComposite | ActorCategory | ConcretActor | CustumParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Process | TaskSimple | TaskComposite | ActorCategory | ConcretActor | CustumParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Process
		public RuleCall getProcessParserRuleCall_0() { return cProcessParserRuleCall_0; }
		
		//TaskSimple
		public RuleCall getTaskSimpleParserRuleCall_1() { return cTaskSimpleParserRuleCall_1; }
		
		//TaskComposite
		public RuleCall getTaskCompositeParserRuleCall_2() { return cTaskCompositeParserRuleCall_2; }
		
		//ActorCategory
		public RuleCall getActorCategoryParserRuleCall_3() { return cActorCategoryParserRuleCall_3; }
		
		//ConcretActor
		public RuleCall getConcretActorParserRuleCall_4() { return cConcretActorParserRuleCall_4; }
		
		//CustumParameter
		public RuleCall getCustumParameterParserRuleCall_5() { return cCustumParameterParserRuleCall_5; }
	}
	public class CustumParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.CustumParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustumParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomParametreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomParametreIDTerminalRuleCall_1_0 = (RuleCall)cNomParametreAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametresEntreeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametresEntreeParameterParserRuleCall_2_1_0 = (RuleCall)cParametresEntreeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametresSortieAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametresSortieParameterParserRuleCall_3_1_0 = (RuleCall)cParametresSortieAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cDescriptionActeurKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cColonKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cDescriptionActeurAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cDescriptionActeurSTRINGTerminalRuleCall_4_2_2_0 = (RuleCall)cDescriptionActeurAssignment_4_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//CustumParameter:
		//    'CustumParameter' nomParametre=ID
		//    ('(' parametresEntree+=Parameter* ')')? // Paramètres d'entrée
		//    ('<' parametresSortie+=Parameter* '>')? // Paramètres de sortie
		//    ('{'
		//        (variables+=VariableDeclaration*)?
		//        ('descriptionActeur' ':' descriptionActeur=STRING)?
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CustumParameter' nomParametre=ID
		//('(' parametresEntree+=Parameter* ')')? // Paramètres d'entrée
		//('<' parametresSortie+=Parameter* '>')? // Paramètres de sortie
		//('{'
		//    (variables+=VariableDeclaration*)?
		//    ('descriptionActeur' ':' descriptionActeur=STRING)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'CustumParameter'
		public Keyword getCustumParameterKeyword_0() { return cCustumParameterKeyword_0; }
		
		//nomParametre=ID
		public Assignment getNomParametreAssignment_1() { return cNomParametreAssignment_1; }
		
		//ID
		public RuleCall getNomParametreIDTerminalRuleCall_1_0() { return cNomParametreIDTerminalRuleCall_1_0; }
		
		//('(' parametresEntree+=Parameter* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parametresEntree+=Parameter*
		public Assignment getParametresEntreeAssignment_2_1() { return cParametresEntreeAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametresEntreeParameterParserRuleCall_2_1_0() { return cParametresEntreeParameterParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//// Paramètres d'entrée
		//   ('<' parametresSortie+=Parameter* '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//parametresSortie+=Parameter*
		public Assignment getParametresSortieAssignment_3_1() { return cParametresSortieAssignment_3_1; }
		
		//Parameter
		public RuleCall getParametresSortieParameterParserRuleCall_3_1_0() { return cParametresSortieParameterParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }
		
		//// Paramètres de sortie
		//   ('{'
		//       (variables+=VariableDeclaration*)?
		//       ('descriptionActeur' ':' descriptionActeur=STRING)?
		//   '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(variables+=VariableDeclaration*)?
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_4_1_0() { return cVariablesVariableDeclarationParserRuleCall_4_1_0; }
		
		//('descriptionActeur' ':' descriptionActeur=STRING)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'descriptionActeur'
		public Keyword getDescriptionActeurKeyword_4_2_0() { return cDescriptionActeurKeyword_4_2_0; }
		
		//':'
		public Keyword getColonKeyword_4_2_1() { return cColonKeyword_4_2_1; }
		
		//descriptionActeur=STRING
		public Assignment getDescriptionActeurAssignment_4_2_2() { return cDescriptionActeurAssignment_4_2_2; }
		
		//STRING
		public RuleCall getDescriptionActeurSTRINGTerminalRuleCall_4_2_2_0() { return cDescriptionActeurSTRINGTerminalRuleCall_4_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdentifiantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiantIDTerminalRuleCall_1_0 = (RuleCall)cIdentifiantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_2_1_0 = (RuleCall)cValueAssignment_2_2_1.eContents().get(0);
		
		//// Déclaration et réutilisation des variables
		//VariableDeclaration:
		//    type=VariableType identifiant=ID ('=' value=Expression (',' value=Expression)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType identifiant=ID ('=' value=Expression (',' value=Expression)*)?
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_0_0() { return cTypeVariableTypeParserRuleCall_0_0; }
		
		//identifiant=ID
		public Assignment getIdentifiantAssignment_1() { return cIdentifiantAssignment_1; }
		
		//ID
		public RuleCall getIdentifiantIDTerminalRuleCall_1_0() { return cIdentifiantIDTerminalRuleCall_1_0; }
		
		//('=' value=Expression (',' value=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }
		
		//(',' value=Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2_2_1() { return cValueAssignment_2_2_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_2_1_0() { return cValueExpressionParserRuleCall_2_2_1_0; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleVariableTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexVariableTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableType:
		//    SimpleVariableType | ComplexVariableType | ArrayType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleVariableType | ComplexVariableType | ArrayType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleVariableType
		public RuleCall getSimpleVariableTypeParserRuleCall_0() { return cSimpleVariableTypeParserRuleCall_0; }
		
		//ComplexVariableType
		public RuleCall getComplexVariableTypeParserRuleCall_1() { return cComplexVariableTypeParserRuleCall_1; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_2() { return cArrayTypeParserRuleCall_2; }
	}
	public class SimpleVariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.SimpleVariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//SimpleVariableType:
		//    'int' | 'string' | 'float' | 'boolean'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'string' | 'float' | 'boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//'boolean'
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
	}
	public class ComplexVariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.ComplexVariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTaskSimpleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTaskCompositeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cActorCategoryKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cConcretActorKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ComplexVariableType:
		//    'Process' | 'TaskSimple' | 'TaskComposite' | 'ActorCategory' | 'ConcretActor'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Process' | 'TaskSimple' | 'TaskComposite' | 'ActorCategory' | 'ConcretActor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//'TaskSimple'
		public Keyword getTaskSimpleKeyword_1() { return cTaskSimpleKeyword_1; }
		
		//'TaskComposite'
		public Keyword getTaskCompositeKeyword_2() { return cTaskCompositeKeyword_2; }
		
		//'ActorCategory'
		public Keyword getActorCategoryKeyword_3() { return cActorCategoryKeyword_3; }
		
		//'ConcretActor'
		public Keyword getConcretActorKeyword_4() { return cConcretActorKeyword_4; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.ArrayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleVariableTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cComplexVariableTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ArrayType:
		//    SimpleVariableType '[' ']' | ComplexVariableType '[' ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleVariableType '[' ']' | ComplexVariableType '[' ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleVariableType '[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//SimpleVariableType
		public RuleCall getSimpleVariableTypeParserRuleCall_0_0() { return cSimpleVariableTypeParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//ComplexVariableType '[' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//ComplexVariableType
		public RuleCall getComplexVariableTypeParserRuleCall_1_0() { return cComplexVariableTypeParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//    Literal | VariableReference | ArrayAccess
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | VariableReference | ArrayAccess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }
		
		//ArrayAccess
		public RuleCall getArrayAccessParserRuleCall_2() { return cArrayAccessParserRuleCall_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//    StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }
		
		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_2() { return cFloatLiteralParserRuleCall_2; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral:
		//    value=FLOAT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanLiteral:
		//    value=('true' | 'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableDeclarationCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_0.eContents().get(1);
		
		//// Références aux variables déjà déclarées
		//VariableReference:
		//    variable=[VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_0() { return cVariableVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class ArrayAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.ArrayAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cArrayVariableDeclarationCrossReference_0_0 = (CrossReference)cArrayAssignment_0.eContents().get(0);
		private final RuleCall cArrayVariableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cArrayVariableDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayAccess:
		//    array=[VariableDeclaration] '[' index=INT ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//array=[VariableDeclaration] '[' index=INT ']'
		public Group getGroup() { return cGroup; }
		
		//array=[VariableDeclaration]
		public Assignment getArrayAssignment_0() { return cArrayAssignment_0; }
		
		//[VariableDeclaration]
		public CrossReference getArrayVariableDeclarationCrossReference_0_0() { return cArrayVariableDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getArrayVariableDeclarationIDTerminalRuleCall_0_0_1() { return cArrayVariableDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final ProcessElements pProcess;
	private final ActorCategoryElements pActorCategory;
	private final ConcretActorElements pConcretActor;
	private final TaskElements pTask;
	private final TaskSimpleElements pTaskSimple;
	private final TaskCompositeElements pTaskComposite;
	private final ParameterElements pParameter;
	private final SimpleParameterElements pSimpleParameter;
	private final StringParameterElements pStringParameter;
	private final IntParameterElements pIntParameter;
	private final FloatParameterElements pFloatParameter;
	private final BooleanParameterElements pBooleanParameter;
	private final ComplexParameterElements pComplexParameter;
	private final CustumParameterElements pCustumParameter;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableTypeElements pVariableType;
	private final SimpleVariableTypeElements pSimpleVariableType;
	private final ComplexVariableTypeElements pComplexVariableType;
	private final ArrayTypeElements pArrayType;
	private final ExpressionElements pExpression;
	private final LiteralElements pLiteral;
	private final StringLiteralElements pStringLiteral;
	private final IntLiteralElements pIntLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final VariableReferenceElements pVariableReference;
	private final ArrayAccessElements pArrayAccess;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProcessGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProcess = new ProcessElements();
		this.pActorCategory = new ActorCategoryElements();
		this.pConcretActor = new ConcretActorElements();
		this.pTask = new TaskElements();
		this.pTaskSimple = new TaskSimpleElements();
		this.pTaskComposite = new TaskCompositeElements();
		this.pParameter = new ParameterElements();
		this.pSimpleParameter = new SimpleParameterElements();
		this.pStringParameter = new StringParameterElements();
		this.pIntParameter = new IntParameterElements();
		this.pFloatParameter = new FloatParameterElements();
		this.pBooleanParameter = new BooleanParameterElements();
		this.pComplexParameter = new ComplexParameterElements();
		this.pCustumParameter = new CustumParameterElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableType = new VariableTypeElements();
		this.pSimpleVariableType = new SimpleVariableTypeElements();
		this.pComplexVariableType = new ComplexVariableTypeElements();
		this.pArrayType = new ArrayTypeElements();
		this.pExpression = new ExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pArrayAccess = new ArrayAccessElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.process.Process.FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.process.Process".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Déclaration des éléments principaux
	//Model:
	//    processus+=Process*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Process:
	//    'Process' identifiant=ID
	//    ('(' entrees+=Parameter* ')')? // Paramètres d'entrée
	//    ('<' sorties+=Parameter* '>')? // Paramètres de sortie
	//    '{'
	//        (variables+=VariableDeclaration*)? // Déclaration de variables
	//        (acteurCategories+=ActorCategory*)?
	//        (taches+=Task*)?
	//    '}'
	//;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ActorCategory:
	//    'ActorCategory' identifiant=ID
	//    '{'
	//        'codeActeur' ':' codeActeur=STRING (',' codeActeurs+=STRING)*
	//        (variables+=VariableDeclaration*)?
	//        'descriptionActeur' ':' descriptionActeur=STRING
	//        ('acteursConcrets' ':' acteursConcrets+=ConcretActor*)?
	//    '}'
	//;
	public ActorCategoryElements getActorCategoryAccess() {
		return pActorCategory;
	}
	
	public ParserRule getActorCategoryRule() {
		return getActorCategoryAccess().getRule();
	}
	
	//ConcretActor:
	//    'ConcretActor' identifiant=ID
	//    '{'
	//        'descriptionActeur' ':' descriptionActeur=STRING
	//        (variables+=VariableDeclaration*)?
	//    '}'
	//;
	public ConcretActorElements getConcretActorAccess() {
		return pConcretActor;
	}
	
	public ParserRule getConcretActorRule() {
		return getConcretActorAccess().getRule();
	}
	
	//Task:
	//    TaskSimple | TaskComposite
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//TaskSimple:
	//    'TaskSimple' identifiant=ID
	//    ('(' entrees+=Parameter* ')')? // Paramètres d'entrée
	//    ('<' sorties+=Parameter* '>')? // Paramètres de sortie
	//    '{'
	//        ('description' ':' descriptionActeur=STRING)?
	//        (variables+=VariableDeclaration*)?
	//    '}'
	//;
	public TaskSimpleElements getTaskSimpleAccess() {
		return pTaskSimple;
	}
	
	public ParserRule getTaskSimpleRule() {
		return getTaskSimpleAccess().getRule();
	}
	
	//TaskComposite:
	//    'TaskComposite' identifiant=ID
	//    ('(' entrees+=Parameter* ')')? // Paramètres d'entrée
	//    ('<' sorties+=Parameter* '>')? // Paramètres de sortie
	//    '{'
	//        (variables+=VariableDeclaration*)?
	//        ('description' ':' descriptionActeur=STRING)?
	//        'taches' taches+=Task* // Une tâche composite contient d'autres tâches (simples ou composites)
	//    '}'
	//;
	public TaskCompositeElements getTaskCompositeAccess() {
		return pTaskComposite;
	}
	
	public ParserRule getTaskCompositeRule() {
		return getTaskCompositeAccess().getRule();
	}
	
	//Parameter:
	//    SimpleParameter | ComplexParameter
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//SimpleParameter:
	//    StringParameter | IntParameter | FloatParameter | BooleanParameter | VariableDeclaration
	//;
	public SimpleParameterElements getSimpleParameterAccess() {
		return pSimpleParameter;
	}
	
	public ParserRule getSimpleParameterRule() {
		return getSimpleParameterAccess().getRule();
	}
	
	//StringParameter:
	//    'String' value=STRING
	//;
	public StringParameterElements getStringParameterAccess() {
		return pStringParameter;
	}
	
	public ParserRule getStringParameterRule() {
		return getStringParameterAccess().getRule();
	}
	
	//IntParameter:
	//    'Int' value=INT
	//;
	public IntParameterElements getIntParameterAccess() {
		return pIntParameter;
	}
	
	public ParserRule getIntParameterRule() {
		return getIntParameterAccess().getRule();
	}
	
	//FloatParameter:
	//    'Float' value=FLOAT
	//;
	public FloatParameterElements getFloatParameterAccess() {
		return pFloatParameter;
	}
	
	public ParserRule getFloatParameterRule() {
		return getFloatParameterAccess().getRule();
	}
	
	//BooleanParameter:
	//    'Boolean' value=('true' | 'false')
	//;
	public BooleanParameterElements getBooleanParameterAccess() {
		return pBooleanParameter;
	}
	
	public ParserRule getBooleanParameterRule() {
		return getBooleanParameterAccess().getRule();
	}
	
	//ComplexParameter:
	//    Process | TaskSimple | TaskComposite | ActorCategory | ConcretActor | CustumParameter
	//;
	public ComplexParameterElements getComplexParameterAccess() {
		return pComplexParameter;
	}
	
	public ParserRule getComplexParameterRule() {
		return getComplexParameterAccess().getRule();
	}
	
	//CustumParameter:
	//    'CustumParameter' nomParametre=ID
	//    ('(' parametresEntree+=Parameter* ')')? // Paramètres d'entrée
	//    ('<' parametresSortie+=Parameter* '>')? // Paramètres de sortie
	//    ('{'
	//        (variables+=VariableDeclaration*)?
	//        ('descriptionActeur' ':' descriptionActeur=STRING)?
	//    '}')?
	//;
	public CustumParameterElements getCustumParameterAccess() {
		return pCustumParameter;
	}
	
	public ParserRule getCustumParameterRule() {
		return getCustumParameterAccess().getRule();
	}
	
	//// Déclaration et réutilisation des variables
	//VariableDeclaration:
	//    type=VariableType identifiant=ID ('=' value=Expression (',' value=Expression)*)?
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableType:
	//    SimpleVariableType | ComplexVariableType | ArrayType
	//;
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//SimpleVariableType:
	//    'int' | 'string' | 'float' | 'boolean'
	//;
	public SimpleVariableTypeElements getSimpleVariableTypeAccess() {
		return pSimpleVariableType;
	}
	
	public ParserRule getSimpleVariableTypeRule() {
		return getSimpleVariableTypeAccess().getRule();
	}
	
	//ComplexVariableType:
	//    'Process' | 'TaskSimple' | 'TaskComposite' | 'ActorCategory' | 'ConcretActor'
	//;
	public ComplexVariableTypeElements getComplexVariableTypeAccess() {
		return pComplexVariableType;
	}
	
	public ParserRule getComplexVariableTypeRule() {
		return getComplexVariableTypeAccess().getRule();
	}
	
	//ArrayType:
	//    SimpleVariableType '[' ']' | ComplexVariableType '[' ']'
	//;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//Expression:
	//    Literal | VariableReference | ArrayAccess
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Literal:
	//    StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//    value=INT
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//FloatLiteral:
	//    value=FLOAT
	//;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    value=('true' | 'false')
	//;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//// Références aux variables déjà déclarées
	//VariableReference:
	//    variable=[VariableDeclaration]
	//;
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//ArrayAccess:
	//    array=[VariableDeclaration] '[' index=INT ']'
	//;
	public ArrayAccessElements getArrayAccessAccess() {
		return pArrayAccess;
	}
	
	public ParserRule getArrayAccessRule() {
		return getArrayAccessAccess().getRule();
	}
	
	//terminal FLOAT:
	//    '-'? INT '.' INT (('e' | 'E') '-'? INT)?
	//;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
