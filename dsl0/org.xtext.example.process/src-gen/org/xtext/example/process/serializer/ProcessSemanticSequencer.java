/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.process.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.process.process.ActorCategory;
import org.xtext.example.process.process.ArrayAccess;
import org.xtext.example.process.process.BooleanLiteral;
import org.xtext.example.process.process.BooleanParameter;
import org.xtext.example.process.process.ConcretActor;
import org.xtext.example.process.process.CustumParameter;
import org.xtext.example.process.process.FloatLiteral;
import org.xtext.example.process.process.FloatParameter;
import org.xtext.example.process.process.IntLiteral;
import org.xtext.example.process.process.IntParameter;
import org.xtext.example.process.process.Model;
import org.xtext.example.process.process.ProcessPackage;
import org.xtext.example.process.process.StringLiteral;
import org.xtext.example.process.process.StringParameter;
import org.xtext.example.process.process.TaskComposite;
import org.xtext.example.process.process.TaskSimple;
import org.xtext.example.process.process.VariableDeclaration;
import org.xtext.example.process.process.VariableReference;
import org.xtext.example.process.services.ProcessGrammarAccess;

@SuppressWarnings("all")
public class ProcessSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProcessGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProcessPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProcessPackage.ACTOR_CATEGORY:
				sequence_ActorCategory(context, (ActorCategory) semanticObject); 
				return; 
			case ProcessPackage.ARRAY_ACCESS:
				sequence_ArrayAccess(context, (ArrayAccess) semanticObject); 
				return; 
			case ProcessPackage.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case ProcessPackage.BOOLEAN_PARAMETER:
				sequence_BooleanParameter(context, (BooleanParameter) semanticObject); 
				return; 
			case ProcessPackage.CONCRET_ACTOR:
				sequence_ConcretActor(context, (ConcretActor) semanticObject); 
				return; 
			case ProcessPackage.CUSTUM_PARAMETER:
				sequence_CustumParameter(context, (CustumParameter) semanticObject); 
				return; 
			case ProcessPackage.FLOAT_LITERAL:
				sequence_FloatLiteral(context, (FloatLiteral) semanticObject); 
				return; 
			case ProcessPackage.FLOAT_PARAMETER:
				sequence_FloatParameter(context, (FloatParameter) semanticObject); 
				return; 
			case ProcessPackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case ProcessPackage.INT_PARAMETER:
				sequence_IntParameter(context, (IntParameter) semanticObject); 
				return; 
			case ProcessPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ProcessPackage.PROCESS:
				sequence_Process(context, (org.xtext.example.process.process.Process) semanticObject); 
				return; 
			case ProcessPackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			case ProcessPackage.STRING_PARAMETER:
				sequence_StringParameter(context, (StringParameter) semanticObject); 
				return; 
			case ProcessPackage.TASK_COMPOSITE:
				sequence_TaskComposite(context, (TaskComposite) semanticObject); 
				return; 
			case ProcessPackage.TASK_SIMPLE:
				sequence_TaskSimple(context, (TaskSimple) semanticObject); 
				return; 
			case ProcessPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			case ProcessPackage.VARIABLE_REFERENCE:
				sequence_VariableReference(context, (VariableReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ActorCategory returns ActorCategory
	 *     Parameter returns ActorCategory
	 *     ComplexParameter returns ActorCategory
	 *
	 * Constraint:
	 *     (
	 *         identifiant=ID 
	 *         codeActeur=STRING 
	 *         codeActeurs+=STRING* 
	 *         variables+=VariableDeclaration* 
	 *         descriptionActeur=STRING 
	 *         acteursConcrets+=ConcretActor*
	 *     )
	 * </pre>
	 */
	protected void sequence_ActorCategory(ISerializationContext context, ActorCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns ArrayAccess
	 *     ArrayAccess returns ArrayAccess
	 *
	 * Constraint:
	 *     (array=[VariableDeclaration|ID] index=INT)
	 * </pre>
	 */
	protected void sequence_ArrayAccess(ISerializationContext context, ArrayAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.ARRAY_ACCESS__ARRAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.ARRAY_ACCESS__ARRAY));
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.ARRAY_ACCESS__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.ARRAY_ACCESS__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArrayAccessAccess().getArrayVariableDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(ProcessPackage.Literals.ARRAY_ACCESS__ARRAY, false));
		feeder.accept(grammarAccess.getArrayAccessAccess().getIndexINTTerminalRuleCall_2_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns BooleanLiteral
	 *     Literal returns BooleanLiteral
	 *     BooleanLiteral returns BooleanLiteral
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 * </pre>
	 */
	protected void sequence_BooleanLiteral(ISerializationContext context, BooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns BooleanParameter
	 *     SimpleParameter returns BooleanParameter
	 *     BooleanParameter returns BooleanParameter
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 * </pre>
	 */
	protected void sequence_BooleanParameter(ISerializationContext context, BooleanParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConcretActor returns ConcretActor
	 *     Parameter returns ConcretActor
	 *     ComplexParameter returns ConcretActor
	 *
	 * Constraint:
	 *     (identifiant=ID descriptionActeur=STRING variables+=VariableDeclaration*)
	 * </pre>
	 */
	protected void sequence_ConcretActor(ISerializationContext context, ConcretActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns CustumParameter
	 *     ComplexParameter returns CustumParameter
	 *     CustumParameter returns CustumParameter
	 *
	 * Constraint:
	 *     (nomParametre=ID parametresEntree+=Parameter* parametresSortie+=Parameter* variables+=VariableDeclaration* descriptionActeur=STRING?)
	 * </pre>
	 */
	protected void sequence_CustumParameter(ISerializationContext context, CustumParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns FloatLiteral
	 *     Literal returns FloatLiteral
	 *     FloatLiteral returns FloatLiteral
	 *
	 * Constraint:
	 *     value=FLOAT
	 * </pre>
	 */
	protected void sequence_FloatLiteral(ISerializationContext context, FloatLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.FLOAT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.FLOAT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns FloatParameter
	 *     SimpleParameter returns FloatParameter
	 *     FloatParameter returns FloatParameter
	 *
	 * Constraint:
	 *     value=FLOAT
	 * </pre>
	 */
	protected void sequence_FloatParameter(ISerializationContext context, FloatParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.FLOAT_PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.FLOAT_PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatParameterAccess().getValueFLOATTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns IntLiteral
	 *     Literal returns IntLiteral
	 *     IntLiteral returns IntLiteral
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_IntLiteral(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.INT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.INT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns IntParameter
	 *     SimpleParameter returns IntParameter
	 *     IntParameter returns IntParameter
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_IntParameter(ISerializationContext context, IntParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.INT_PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.INT_PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntParameterAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     processus+=Process+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *     Parameter returns Process
	 *     ComplexParameter returns Process
	 *
	 * Constraint:
	 *     (
	 *         identifiant=ID 
	 *         entrees+=Parameter* 
	 *         sorties+=Parameter* 
	 *         variables+=VariableDeclaration* 
	 *         acteurCategories+=ActorCategory* 
	 *         taches+=Task*
	 *     )
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, org.xtext.example.process.process.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns StringLiteral
	 *     Literal returns StringLiteral
	 *     StringLiteral returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringLiteral(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns StringParameter
	 *     SimpleParameter returns StringParameter
	 *     StringParameter returns StringParameter
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringParameter(ISerializationContext context, StringParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.STRING_PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.STRING_PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringParameterAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns TaskComposite
	 *     TaskComposite returns TaskComposite
	 *     Parameter returns TaskComposite
	 *     ComplexParameter returns TaskComposite
	 *
	 * Constraint:
	 *     (
	 *         identifiant=ID 
	 *         entrees+=Parameter* 
	 *         sorties+=Parameter* 
	 *         variables+=VariableDeclaration* 
	 *         descriptionActeur=STRING? 
	 *         taches+=Task*
	 *     )
	 * </pre>
	 */
	protected void sequence_TaskComposite(ISerializationContext context, TaskComposite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns TaskSimple
	 *     TaskSimple returns TaskSimple
	 *     Parameter returns TaskSimple
	 *     ComplexParameter returns TaskSimple
	 *
	 * Constraint:
	 *     (identifiant=ID entrees+=Parameter* sorties+=Parameter* descriptionActeur=STRING? variables+=VariableDeclaration*)
	 * </pre>
	 */
	protected void sequence_TaskSimple(ISerializationContext context, TaskSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns VariableDeclaration
	 *     SimpleParameter returns VariableDeclaration
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (type=VariableType identifiant=ID (value=Expression value=Expression*)?)
	 * </pre>
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns VariableReference
	 *     VariableReference returns VariableReference
	 *
	 * Constraint:
	 *     variable=[VariableDeclaration|ID]
	 * </pre>
	 */
	protected void sequence_VariableReference(ISerializationContext context, VariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.VARIABLE_REFERENCE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.VARIABLE_REFERENCE__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableReferenceAccess().getVariableVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(ProcessPackage.Literals.VARIABLE_REFERENCE__VARIABLE, false));
		feeder.finish();
	}
	
	
}
